% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getblocksnearby_from_fips.R
\name{getblocksnearby_from_fips}
\alias{getblocksnearby_from_fips}
\title{Find all blocks within each of the FIPS codes provided}
\usage{
getblocksnearby_from_fips(
  fips,
  in_shiny = FALSE,
  need_blockwt = TRUE,
  return_shp = FALSE,
  allow_multiple_fips_types = TRUE
)
}
\arguments{
\item{fips}{vector of FIPS codes identifying blockgroups, tracts, counties, or states.
This is useful if -- instead of getting stats on and comparing circular buffers or polygons --
one will be getting stats on one or more tracts,
or analyzing and comparing blockgroups in a county,
or comparing whole counties to each other, within a State.}

\item{in_shiny}{used by shiny app server code to handle errors via validate() instead of stop()}

\item{need_blockwt}{set to FALSE to speed it up if you do not need blockwt}

\item{return_shp}{set to TRUE to get a named list, pts and polys, that are sites2blocks table and spatial data.frame,
or FALSE to get the pts data.table much like output of \code{\link[=getblocksnearby]{getblocksnearby()}} for latlon points.}

\item{allow_multiple_fips_types}{if enabled, set TRUE to allow mix of blockgroup, tract, city, county, state fips}
}
\value{
data.table with colnames ejam_uniq_id, blockid, distance, blockwt, bgid, fips.

\code{\link[=getblocksnearby]{getblocksnearby()}} output is similar but
\code{getblocksnearby(testpoints_10, radius = 1)}
also returns extra columns from input, like lat,lon.

\code{\link[=get_blockpoints_in_shape]{get_blockpoints_in_shape()}} output is similar but
\code{get_blockpoints_in_shape(testinput_shapes_2)}
returns a list of pts table and polys table, where the pts data.table has
colnames ejam_uniq_id, blockid, distance, blockwt, bgid, lat, lon.
}
\description{
Allows EJAM to analyze and compare Counties, for example
}
\examples{
  x <- getblocksnearby_from_fips(fips_counties_from_state_abbrev("DE"))
  y <- doaggregate(x)
  z <- ejamit(fips = fips_counties_from_statename("Delaware"))

  # x2 <- getblocksnearby_from_fips("482011000011") # one blockgroup only
  # y2 <- doaggregate(x2)
}
\seealso{
\code{\link[=getblocksnearby]{getblocksnearby()}} \code{\link[=fips_bgs_in_fips]{fips_bgs_in_fips()}} \code{\link[=fips_lead_zero]{fips_lead_zero()}} \code{\link[=getblocksnearby_from_fips]{getblocksnearby_from_fips()}} \code{\link[=fips_from_table]{fips_from_table()}}
}
